# üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Django-HLSField

## üöÄ –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞

### –ß–µ—Ä–µ–∑ pip (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)

```bash
# –ë–∞–∑–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
pip install django-hlsfield

# –° Celery –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
pip install django-hlsfield[celery]

# –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
pip install django-hlsfield[all]
```

### –ß–µ—Ä–µ–∑ poetry

```bash
# –ë–∞–∑–æ–≤–∞—è
poetry add django-hlsfield

# –° –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏
poetry add django-hlsfield[celery,s3,preview]
```

### –ß–µ—Ä–µ–∑ pipenv

```bash
pipenv install django-hlsfield[all]
```

---

## üéØ –í–∞—Ä–∏–∞–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏

### 1. üè† –ë–∞–∑–æ–≤–∞—è (–ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã)

```bash
pip install django-hlsfield
```

**–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:**
- VideoField, HLSVideoField, DASHVideoField, AdaptiveVideoField
- –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
- –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
- HTML-–ø–ª–µ–µ—Ä—ã

**–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:**
- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –ù–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
- –û–±—É—á–µ–Ω–∏—è –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤

### 2. ‚ö° –° Celery (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)

```bash
pip install django-hlsfield[celery]
```

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ—Ç:**
- Celery –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
- –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
- –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞

**–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:**
- Production –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
- –ë–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ
- –î–ª–∏–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (>10 –º–∏–Ω—É—Ç)

### 3. ‚òÅÔ∏è –û–±–ª–∞—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞

```bash
# AWS S3
pip install django-hlsfield[s3,celery]

# Google Cloud Storage
pip install django-hlsfield[gcs,celery]

# Microsoft Azure
pip install django-hlsfield[azure,celery]
```

**–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:**
- Production —Å CDN
- –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
- –ì–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

### 4. üé¨ –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞

```bash
pip install django-hlsfield[all]
```

**–í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ:**
- Celery –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
- Pillow –¥–ª—è –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- Boto3 –¥–ª—è AWS S3
- Redis –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

**–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:**
- Enterprise —Ä–µ—à–µ–Ω–∏–π
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- Production —Å –≤—ã—Å–æ–∫–∏–º–∏ –Ω–∞–≥—Ä—É–∑–∫–∞–º–∏

---

## üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

#### FFmpeg (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ!)

**Ubuntu/Debian:**
```bash
sudo apt update
sudo apt install ffmpeg ffprobe
```

**CentOS/RHEL:**
```bash
sudo yum install epel-release
sudo yum install ffmpeg ffmpeg-devel
```

**macOS:**
```bash
brew install ffmpeg
```

**Windows:**
1. –°–∫–∞—á–∞–π—Ç–µ —Å [ffmpeg.org](https://ffmpeg.org/download.html)
2. –î–æ–±–∞–≤—å—Ç–µ –≤ PATH
3. –ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:
```python
HLSFIELD_FFMPEG = "C:\\path\\to\\ffmpeg.exe"
HLSFIELD_FFPROBE = "C:\\path\\to\\ffprobe.exe"
```

### –ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg

```bash
ffmpeg -version
ffprobe -version
```

–î–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é 4.4 –∏–ª–∏ –≤—ã—à–µ.

---

## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django

### 1. –î–æ–±–∞–≤—å—Ç–µ –≤ INSTALLED_APPS

```python
# settings.py
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # –í–∞—à–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    'myapp',

    # Django-HLSField
    'hlsfield',  # üëà –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ
]
```

### 2. –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

```python
# settings.py

# –ü—É—Ç–∏ –∫ FFmpeg (–µ—Å–ª–∏ –Ω–µ –≤ PATH)
HLSFIELD_FFMPEG = "ffmpeg"    # –∏–ª–∏ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
HLSFIELD_FFPROBE = "ffprobe"  # –∏–ª–∏ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å

# –ö–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
HLSFIELD_DEFAULT_LADDER = [
    {"height": 360, "v_bitrate": 800, "a_bitrate": 96},
    {"height": 720, "v_bitrate": 2500, "a_bitrate": 128},
    {"height": 1080, "v_bitrate": 4500, "a_bitrate": 160},
]

# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–æ–≤ HLS –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
HLSFIELD_SEGMENT_DURATION = 6
```

### 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤

```python
# settings.py

# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ
FILE_UPLOAD_MAX_MEMORY_SIZE = 100 * 1024 * 1024  # 100MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 100 * 1024 * 1024   # 100MB
```

---

## üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Celery (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)

### 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Redis

**Ubuntu/Debian:**
```bash
sudo apt install redis-server
```

**macOS:**
```bash
brew install redis
brew services start redis
```

**Docker:**
```bash
docker run -d -p 6379:6379 redis:7-alpine
```

### 2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Celery

```python
# settings.py
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
```

### 3. –°–æ–∑–¥–∞–π—Ç–µ celery.py

```python
# myproject/celery.py
import os
from celery import Celery

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')

app = Celery('myproject')
app.config_from_object('django.conf:settings', namespace='CELERY')
app.autodiscover_tasks()
```

### 4. –û–±–Ω–æ–≤–∏—Ç–µ __init__.py

```python
# myproject/__init__.py
from .celery import app as celery_app

__all__ = ('celery_app',)
```

### 5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–æ—Ä–∫–µ—Ä—ã

```bash
# –í –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
celery -A myproject worker --loglevel=info
```

---

## ‚òÅÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AWS S3

### 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

```bash
pip install django-hlsfield[s3]
# –∏–ª–∏
pip install boto3 django-storages
```

### 2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ storage

```python
# settings.py
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

AWS_ACCESS_KEY_ID = 'your-access-key'
AWS_SECRET_ACCESS_KEY = 'your-secret-key'
AWS_STORAGE_BUCKET_NAME = 'your-bucket-name'
AWS_S3_REGION_NAME = 'us-east-1'  # –≤–∞—à —Ä–µ–≥–∏–æ–Ω

# –î–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∏–¥–µ–æ
AWS_DEFAULT_ACL = 'public-read'
AWS_S3_FILE_OVERWRITE = False  # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
```

### 3. CloudFront CDN (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

```python
# settings.py
AWS_S3_CUSTOM_DOMAIN = 'your-cloudfront-domain.cloudfront.net'
```

---

## üê≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ Docker

### Dockerfile

```dockerfile
FROM python:3.11-slim

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FFmpeg
RUN apt-get update && apt-get install -y \
    ffmpeg \
    && rm -rf /var/lib/apt/lists/*

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python
COPY requirements.txt .
RUN pip install -r requirements.txt

# –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–¥
COPY . /app
WORKDIR /app

CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
```

### docker-compose.yml

```yaml
version: '3.8'

services:
  web:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DEBUG=True
      - DATABASE_URL=sqlite:///db.sqlite3
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis

  celery:
    build: .
    command: celery -A myproject worker --loglevel=info
    environment:
      - DEBUG=True
      - DATABASE_URL=sqlite:///db.sqlite3
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
```

---

## ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏

### 1. –¢–µ—Å—Ç FFmpeg

```bash
python manage.py shell
```

```python
from hlsfield import defaults
import subprocess

# –ü—Ä–æ–≤–µ—Ä—è–µ–º FFmpeg
result = subprocess.run([defaults.FFMPEG, '-version'], capture_output=True)
print("FFmpeg —Ä–∞–±–æ—Ç–∞–µ—Ç:", result.returncode == 0)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º FFprobe
result = subprocess.run([defaults.FFPROBE, '-version'], capture_output=True)
print("FFprobe —Ä–∞–±–æ—Ç–∞–µ—Ç:", result.returncode == 0)
```

### 2. –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

```python
# models.py
from django.db import models
from hlsfield import VideoField

class TestVideo(models.Model):
    title = models.CharField(max_length=100)
    video = VideoField(upload_to='test_videos/')
```

```python
# –°–æ–∑–¥–∞–π—Ç–µ –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏
python manage.py makemigrations
python manage.py migrate
```

### 3. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ

```python
# –í Django shell
from myapp.models import TestVideo
from django.core.files import File

with open('test_video.mp4', 'rb') as f:
    video = TestVideo.objects.create(
        title='Test',
        video=File(f)
    )

print("–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:", video.video.url)
```

---

## üîß –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º

### FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω

**–û—à–∏–±–∫–∞:** `FileNotFoundError: [Errno 2] No such file or directory: 'ffmpeg'`

**–†–µ—à–µ–Ω–∏–µ:**
```python
# settings.py - —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–µ –ø—É—Ç–∏
HLSFIELD_FFMPEG = "/usr/local/bin/ffmpeg"  # –ø—É—Ç—å –∫ ffmpeg
HLSFIELD_FFPROBE = "/usr/local/bin/ffprobe"  # –ø—É—Ç—å –∫ ffprobe
```

### –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ñ–∞–π–ª–æ–≤

**–û—à–∏–±–∫–∞:** `PermissionError` –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ

**–†–µ—à–µ–Ω–∏–µ:**
```bash
# –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É Django –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
sudo chown -R www-data:www-data /path/to/media/
sudo chmod -R 755 /path/to/media/
```

### Celery –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏

**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:**
```bash
# Celery –∑–∞–ø—É—â–µ–Ω?
celery -A myproject inspect active

# Redis –¥–æ—Å—Ç—É–ø–µ–Ω?
redis-cli ping
```

### –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è

**–ù–∞—Å—Ç—Ä–æ–π—Ç–µ:**
```python
# settings.py
FILE_UPLOAD_MAX_MEMORY_SIZE = 500 * 1024 * 1024  # 500MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 500 * 1024 * 1024

# nginx.conf
client_max_body_size 1000M;
```

### –û—à–∏–±–∫–∏ S3

**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ bucket policy:**
```json
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::your-bucket/*"
        }
    ]
}
```

---

## üìö –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. üìñ **–ò–∑—É—á–∏—Ç–µ [–ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è](examples/)**
2. üéÆ **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ [–≥–æ—Ç–æ–≤—ã–µ –ø–ª–µ–µ—Ä—ã](src/hlsfield/templates/)**
3. ‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ [production –æ–∫—Ä—É–∂–µ–Ω–∏–µ](docs/production.md)**
4. üìä **–ò–∑—É—á–∏—Ç–µ [–∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥](docs/analytics.md)**

---

## üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏

- üìñ [–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](https://django-hlsfield.readthedocs.io/)
- üêõ [–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ](https://github.com/akula993/django-hlsfield/issues)
- üí¨ [–û–±—Å—É–∂–¥–µ–Ω–∏—è](https://github.com/akula993/django-hlsfield/discussions)
- ‚≠ê [GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π](https://github.com/akula993/django-hlsfield)

---

**–ì–æ—Ç–æ–≤–æ! üéâ** –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å django-hlsfield –≤ —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.
