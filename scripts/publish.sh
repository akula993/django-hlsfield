#!/bin/bash
# scripts/publish.sh - –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ PyPI

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

echo "üé¨ Django-HLSField PyPI Publisher"
echo "================================"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "pyproject.toml" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: pyproject.toml –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
python -m pip install --upgrade build twine

# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫
echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–±–æ—Ä–æ–∫..."
rm -rf dist/
rm -rf build/
rm -rf *.egg-info/

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
echo "üè∑Ô∏è  –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:"
python -c "import sys; sys.path.append('src'); import hlsfield; print(f'v{hlsfield.__version__}')"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ git
if ! git diff --quiet; then
    echo "‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è."
    echo "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N)"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        echo "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
        exit 1
    fi
fi

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
if command -v pytest &> /dev/null; then
    python -m pytest tests/ -v
    if [ $? -ne 0 ]; then
        echo "‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
        exit 1
    fi
else
    echo "‚ö†Ô∏è  pytest –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã."
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞..."
if command -v black &> /dev/null; then
    echo "  –ü—Ä–æ–≤–µ—Ä–∫–∞ black..."
    black --check src/
fi

if command -v isort &> /dev/null; then
    echo "  –ü—Ä–æ–≤–µ—Ä–∫–∞ isort..."
    isort --check-only src/
fi

if command -v flake8 &> /dev/null; then
    echo "  –ü—Ä–æ–≤–µ—Ä–∫–∞ flake8..."
    flake8 src/
fi

# –°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞
echo "üèóÔ∏è  –°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞..."
python -m build

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏..."
python -m twine check dist/*

# –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ
echo "üìã –§–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:"
ls -la dist/

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
echo ""
echo "üöÄ –ì–æ—Ç–æ–≤—ã –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ PyPI?"
echo "–§–∞–π–ª—ã: $(ls dist/)"
echo ""
echo "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
echo "1) –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–∞ Test PyPI (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)"
echo "2) –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–∞ Production PyPI"
echo "3) –û—Ç–º–µ–Ω–∞"
echo ""
read -p "–í–∞—à –≤—ã–±–æ—Ä (1/2/3): " choice

case $choice in
    1)
        echo "üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ Test PyPI..."
        python -m twine upload --repository testpypi dist/*
        echo ""
        echo "‚úÖ –ü–∞–∫–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ Test PyPI!"
        echo "üîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: https://test.pypi.org/project/django-hlsfield/"
        echo ""
        echo "–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:"
        echo "pip install --index-url https://test.pypi.org/simple/ django-hlsfield"
        ;;
    2)
        echo "üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ Production PyPI..."
        python -m twine upload dist/*
        echo ""
        echo "üéâ –ü–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ PyPI!"
        echo "üîó –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://pypi.org/project/django-hlsfield/"
        echo ""
        echo "–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ:"
        echo "pip install django-hlsfield"

        # –°–æ–∑–¥–∞–µ–º git tag –¥–ª—è —Ä–µ–ª–∏–∑–∞
        VERSION=$(python -c "import sys; sys.path.append('src'); import hlsfield; print(hlsfield.__version__)")
        echo ""
        echo "üè∑Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ git —Ç–µ–≥–∞ –¥–ª—è —Ä–µ–ª–∏–∑–∞..."
        git tag -a "v$VERSION" -m "Release version $VERSION"
        git push origin "v$VERSION"
        echo "‚úÖ –¢–µ–≥ v$VERSION —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π."
        ;;
    3)
        echo "‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
        exit 0
        ;;
    *)
        echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
        exit 1
        ;;
esac

echo ""
echo "üé¨ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"

# scripts/setup_pypi.sh - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è PyPI
cat << 'EOF' > scripts/setup_pypi.sh
#!/bin/bash
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ PyPI

echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PyPI –æ–∫—Ä—É–∂–µ–Ω–∏—è..."

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
pip install --upgrade build twine

# –°–æ–∑–¥–∞–Ω–∏–µ .pypirc —Ñ–∞–π–ª–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
if [ ! -f ~/.pypirc ]; then
    echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ ~/.pypirc —Ñ–∞–π–ª–∞..."
    cat << 'PYPIRC' > ~/.pypirc
[distutils]
index-servers =
    pypi
    testpypi

[pypi]
username = __token__
password = your-pypi-token-here

[testpypi]
repository = https://test.pypi.org/legacy/
username = __token__
password = your-testpypi-token-here
PYPIRC

    echo "‚úÖ –§–∞–π–ª ~/.pypirc —Å–æ–∑–¥–∞–Ω."
    echo "‚ö†Ô∏è  –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ 'your-pypi-token-here' –∏ 'your-testpypi-token-here'"
    echo "   –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –æ—Ç PyPI –∏ Test PyPI."
    echo ""
    echo "üîó –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã:"
    echo "   PyPI: https://pypi.org/manage/account/token/"
    echo "   Test PyPI: https://test.pypi.org/manage/account/token/"
else
    echo "‚úÖ –§–∞–π–ª ~/.pypirc —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
fi

echo ""
echo "üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –ü–æ–ª—É—á–∏—Ç–µ API —Ç–æ–∫–µ–Ω—ã –Ω–∞ PyPI –∏ Test PyPI"
echo "2. –û–±–Ω–æ–≤–∏—Ç–µ ~/.pypirc —Å –≤–∞—à–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏"
echo "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ./scripts/publish.sh –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"

EOF

# scripts/version_bump.sh - –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
cat << 'EOF' > scripts/version_bump.sh
#!/bin/bash
# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –ø–∞–∫–µ—Ç–∞

set -e

if [ $# -eq 0 ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <–Ω–æ–≤–∞—è_–≤–µ—Ä—Å–∏—è>"
    echo "–ü—Ä–∏–º–µ—Ä: $0 1.0.1"
    exit 1
fi

NEW_VERSION=$1

echo "üè∑Ô∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –¥–æ $NEW_VERSION..."

# –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ __init__.py
sed -i.bak "s/__version__ = \".*\"/__version__ = \"$NEW_VERSION\"/" src/hlsfield/__init__.py

# –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ pyproject.toml
sed -i.bak "s/version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml

# –£–¥–∞–ª—è–µ–º backup —Ñ–∞–π–ª—ã
rm -f src/hlsfield/__init__.py.bak pyproject.toml.bak

echo "‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ $NEW_VERSION"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
echo ""
echo "üìù –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"
git diff --name-only

echo ""
echo "üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –û–±–Ω–æ–≤–∏—Ç–µ CHANGELOG.md"
echo "2. –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: git add . && git commit -m 'Bump version to $NEW_VERSION'"
echo "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ./scripts/publish.sh"

EOF

# scripts/test_install.sh - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
cat << 'EOF' > scripts/test_install.sh
#!/bin/bash
# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

set -e

echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ django-hlsfield"
echo "========================================"

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
TEST_DIR=$(mktemp -d)
echo "üìÅ –¢–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $TEST_DIR"

cd "$TEST_DIR"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
test_installation() {
    local install_command="$1"
    local test_name="$2"

    echo ""
    echo "üß™ –¢–µ—Å—Ç: $test_name"
    echo "–ö–æ–º–∞–Ω–¥–∞: $install_command"
    echo "----------------------------------------"

    # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    python -m venv test_env
    source test_env/bin/activate

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç
    pip install --upgrade pip
    eval "$install_command"

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç
    python -c "
import hlsfield
print(f'‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω. –í–µ—Ä—Å–∏—è: {hlsfield.__version__}')

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
from hlsfield import VideoField, HLSVideoField, DASHVideoField, AdaptiveVideoField
print('‚úÖ –í—Å–µ –ø–æ–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ')

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from hlsfield import defaults
print('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
import hlsfield
import os
templates_dir = os.path.join(os.path.dirname(hlsfield.__file__), 'templates')
if os.path.exists(templates_dir):
    print('‚úÖ –®–∞–±–ª–æ–Ω—ã –Ω–∞–π–¥–µ–Ω—ã')
else:
    print('‚ùå –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
"

    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    deactivate
    rm -rf test_env

    echo "‚úÖ –¢–µ—Å—Ç '$test_name' –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!"
}

# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
test_installation "pip install django-hlsfield" "PyPI Production"

# –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
if pip search django-hlsfield --index https://test.pypi.org/simple/ &>/dev/null; then
    test_installation "pip install --index-url https://test.pypi.org/simple/ django-hlsfield" "Test PyPI"
fi

# –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏
test_installation "pip install 'django-hlsfield[celery]'" "–° Celery"
test_installation "pip install 'django-hlsfield[s3]'" "–° S3"
test_installation "pip install 'django-hlsfield[all]'" "–ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞"

# –û—á–∏—â–∞–µ–º
cd /tmp
rm -rf "$TEST_DIR"

echo ""
echo "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"

EOF

# scripts/check_package.sh - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
cat << 'EOF' > scripts/check_package.sh
#!/bin/bash
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

set -e

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
echo "=========================================="

# –°—á–µ—Ç—á–∏–∫ –ø—Ä–æ–±–ª–µ–º
ISSUES=0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
log_issue() {
    echo "‚ùå $1"
    ((ISSUES++))
}

log_ok() {
    echo "‚úÖ $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
echo ""
echo "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."

if [ -f "pyproject.toml" ]; then
    log_ok "pyproject.toml –Ω–∞–π–¥–µ–Ω"
else
    log_issue "pyproject.toml –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
fi

if [ -f "README.md" ]; then
    log_ok "README.md –Ω–∞–π–¥–µ–Ω"
else
    log_issue "README.md –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
fi

if [ -f "LICENSE" ]; then
    log_ok "LICENSE –Ω–∞–π–¥–µ–Ω"
else
    log_issue "LICENSE –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
fi

if [ -f "CHANGELOG.md" ]; then
    log_ok "CHANGELOG.md –Ω–∞–π–¥–µ–Ω"
else
    log_issue "CHANGELOG.md –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
fi

if [ -d "src/hlsfield" ]; then
    log_ok "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –Ω–∞–π–¥–µ–Ω"
else
    log_issue "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ src/hlsfield"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
echo ""
echo "üè∑Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏..."
VERSION=$(python -c "import sys; sys.path.append('src'); import hlsfield; print(hlsfield.__version__)" 2>/dev/null)
if [ $? -eq 0 ]; then
    log_ok "–í–µ—Ä—Å–∏—è: $VERSION"
else
    log_issue "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
echo ""
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞..."

if command -v black &> /dev/null; then
    if black --check src/ &>/dev/null; then
        log_ok "Black —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    else
        log_issue "–ö–æ–¥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç black —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º"
    fi
else
    echo "‚ö†Ô∏è  Black –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
fi

if command -v flake8 &> /dev/null; then
    if flake8 src/ &>/dev/null; then
        log_ok "Flake8 –ª–∏–Ω—Ç–∏–Ω–≥"
    else
        log_issue "–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ (flake8)"
    fi
else
    echo "‚ö†Ô∏è  Flake8 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏–Ω—Ç–∏–Ω–≥"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo ""
echo "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

if python -c "import django" &>/dev/null; then
    log_ok "Django –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    log_issue "Django –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏
echo ""
echo "üèóÔ∏è  –¢–µ—Å—Ç–æ–≤–∞—è —Å–±–æ—Ä–∫–∞..."
rm -rf dist/ build/ *.egg-info/

if python -m build &>/dev/null; then
    log_ok "–ü–∞–∫–µ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    if python -m twine check dist/* &>/dev/null; then
        log_ok "–ü–∞–∫–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç twine –ø—Ä–æ–≤–µ—Ä–∫—É"
    else
        log_issue "–ü–∞–∫–µ—Ç –Ω–µ –ø—Ä–æ—à–µ–ª twine –ø—Ä–æ–≤–µ—Ä–∫—É"
    fi
else
    log_issue "–û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –ø–∞–∫–µ—Ç–∞"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ README
echo ""
echo "üìñ –ü—Ä–æ–≤–µ—Ä–∫–∞ README..."
README_LENGTH=$(wc -c < README.md)
if [ "$README_LENGTH" -gt 1000 ]; then
    log_ok "README —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π ($README_LENGTH —Å–∏–º–≤–æ–ª–æ–≤)"
else
    log_issue "README —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ($README_LENGTH —Å–∏–º–≤–æ–ª–æ–≤)"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ git
echo ""
echo "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ Git..."
if git status &>/dev/null; then
    if [ -z "$(git status --porcelain)" ]; then
        log_ok "–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –≤ git"
    else
        log_issue "–ï—Å—Ç—å –Ω–µ–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        echo "   –ù–µ–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"
        git status --porcelain | head -5
    fi
else
    log_issue "–ù–µ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–ª–∏ git –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
echo ""
echo "üìã –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"
echo "================"

if [ $ISSUES -eq 0 ]; then
    echo "üéâ –ü–∞–∫–µ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!"
    echo ""
    echo "üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "   1. ./scripts/publish.sh - –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
    echo "   2. git tag v$VERSION - –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞ —Ä–µ–ª–∏–∑–∞"
else
    echo "‚ùå –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: $ISSUES"
    echo ""
    echo "üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π"
fi

exit $ISSUES

EOF

# –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
chmod +x scripts/publish.sh
chmod +x scripts/setup_pypi.sh
chmod +x scripts/version_bump.sh
chmod +x scripts/test_install.sh
chmod +x scripts/check_package.sh

echo ""
echo "üìÅ –°–æ–∑–¥–∞–Ω—ã —Å–∫—Ä–∏–ø—Ç—ã:"
echo "  scripts/publish.sh - –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ PyPI"
echo "  scripts/setup_pypi.sh - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
echo "  scripts/version_bump.sh - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏"
echo "  scripts/test_install.sh - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
echo "  scripts/check_package.sh - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
